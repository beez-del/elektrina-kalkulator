#!/usr/bin/env python3
"""
Proxy server pro stahov√°n√≠ spotov√Ωch cen elekt≈ôiny z OTE
≈òe≈°√≠ CORS probl√©my pro webovou aplikaci
"""

import json
import requests
from datetime import datetime, date, timedelta
from flask import Flask, jsonify, send_from_directory
from flask_cors import CORS
import os
import sys

app = Flask(__name__)
CORS(app)  # Povol√≠ CORS pro v≈°echny dom√©ny

# API endpoints
SPOTOVA_ELEKTRINA_API = "https://spotovaelektrina.cz/api/v1/price/get-prices-json"

@app.route('/')
def serve_app():
    """Serv√≠ruje hlavn√≠ HTML aplikaci"""
    return send_from_directory('.', 'index.html')

@app.route('/api/spot-prices')
@app.route('/api/spot-prices/<date_param>')
def get_spot_prices(date_param='today'):
    """
    St√°hne spotov√© ceny z spotovaelektrina.cz
    Parametry:
    - today: dne≈°n√≠ ceny
    - tomorrow: z√≠t≈ôej≈°√≠ ceny
    """
    try:
        print(f"Stahov√°n√≠ dat pro: {date_param}")
        
        # Urƒçen√≠ c√≠lov√©ho data
        if date_param == 'tomorrow':
            target_date = (date.today() + timedelta(days=1)).isoformat()
        else:
            target_date = date.today().isoformat()
        
        print(f"C√≠lov√© datum: {target_date}")
        
        response = requests.get(SPOTOVA_ELEKTRINA_API, timeout=15)
        response.raise_for_status()
        
        data = response.json()
        print(f"API odpovƒõƒè typ: {type(data)}")
        print(f"API odpovƒõƒè d√©lka: {len(data) if isinstance(data, list) else 'nen√≠ list'}")
        
        # Debug: pod√≠vejme se na strukturu dat
        if data and len(data) > 0:
            print(f"Prvn√≠ polo≈æka: {data[0]}")
            print(f"Typ prvn√≠ polo≈æky: {type(data[0])}")
        
        # Zpracov√°n√≠ dat do jednotn√©ho form√°tu
        processed_data = []
        
        # Kontrola, jestli je data list nebo dict
        if isinstance(data, list):
            # Data jsou list objekt≈Ø
            for item in data:
                if isinstance(item, dict):
                    item_date = item.get('date', '')
                    if item_date == target_date:
                        hour = item.get('hour', 0)
                        price_czk = item.get('price_czk', 0)
                        
                        processed_data.append({
                            'hour': hour,
                            'spotPrice': round(price_czk / 1000, 3),  # p≈ôevod z Kƒç/MWh na Kƒç/kWh
                            'timestamp': f"{target_date}T{hour:02d}:00:00Z"
                        })
                else:
                    print(f"Neoƒçek√°van√Ω typ polo≈æky: {type(item)}, hodnota: {item}")
        
        elif isinstance(data, dict):
            # Data jsou dictionary - mo≈æn√° jin√° struktura
            print(f"Data jsou dict s kl√≠ƒçi: {data.keys()}")
            
            # Zkus√≠me r≈Øzn√© mo≈æn√© struktury
            if 'data' in data:
                actual_data = data['data']
                if isinstance(actual_data, list):
                    for item in actual_data:
                        if isinstance(item, dict):
                            item_date = item.get('date', '')
                            if item_date == target_date:
                                hour = item.get('hour', 0)
                                price_czk = item.get('price_czk', 0)
                                
                                processed_data.append({
                                    'hour': hour,
                                    'spotPrice': round(price_czk / 1000, 3),
                                    'timestamp': f"{target_date}T{hour:02d}:00:00Z"
                                })
        else:
            print(f"Neoƒçek√°van√Ω typ dat z API: {type(data)}")
            raise ValueError(f"API vr√°tilo neoƒçek√°van√Ω typ dat: {type(data)}")
        
        print(f"Zpracov√°no {len(processed_data)} polo≈æek pro datum {target_date}")
        
        # Pokud nem√°me data pro po≈æadovan√© datum
        if len(processed_data) == 0:
            if date_param == 'tomorrow':
                print("≈Ω√°dn√° data pro z√≠t≈ôek - pravdƒõpodobnƒõ je≈°tƒõ nebyla publikov√°na")
                return jsonify({
                    'success': True,
                    'data': [],
                    'message': 'Ceny na z√≠t≈ôek zat√≠m nebyly publikov√°ny',
                    'timestamp': datetime.now().isoformat(),
                    'source': 'spotovaelektrina.cz',
                    'date': target_date
                })
            else:
                print("≈Ω√°dn√° data pro dnes, generuji demo data...")
                processed_data = generate_demo_data()
        
        # Se≈ôad√≠me podle hodin
        processed_data.sort(key=lambda x: x['hour'])
        
        return jsonify({
            'success': True,
            'data': processed_data,
            'timestamp': datetime.now().isoformat(),
            'source': 'spotovaelektrina.cz',
            'date': target_date
        })
        
    except requests.RequestException as e:
        print(f"Chyba p≈ôi stahov√°n√≠ dat: {e}")
        
        # Pro z√≠t≈ôek nebudeme generovat demo data pokud slu≈æba nefunguje
        if date_param == 'tomorrow':
            return jsonify({
                'success': False,
                'data': [],
                'message': 'Slu≈æba nen√≠ dostupn√° a z√≠t≈ôej≈°√≠ ceny nejsou k dispozici',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }), 503
        
        # Pro dnes vygenerujeme demo data
        return jsonify({
            'success': True,
            'data': generate_demo_data(),
            'timestamp': datetime.now().isoformat(),
            'source': 'demo_data'
        })
    
    except Exception as e:
        print(f"Neoƒçek√°van√° chyba: {e}")
        print(f"Typ chyby: {type(e)}")
        
        # Fallback na demo data pro today
        if date_param != 'tomorrow':
            return jsonify({
                'success': True,
                'data': generate_demo_data(),
                'timestamp': datetime.now().isoformat(),
                'source': 'demo_data'
            })
        
        return jsonify({
            'success': False,
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

def generate_demo_data():
    """Generuje demo data s realistick√Ωmi cenami"""
    import random
    
    demo_data = []
    for hour in range(24):
        # Realistick√© ceny podle denn√≠ho profilu
        if 1 <= hour <= 5:  # Noƒçn√≠ minimum
            base_price = 1.8 + random.uniform(0, 0.5)
        elif 7 <= hour <= 9:  # Rann√≠ ≈°piƒçka
            base_price = 4.2 + random.uniform(0, 1.0)
        elif 10 <= hour <= 16:  # Den
            base_price = 3.2 + random.uniform(0, 0.8)
        elif 17 <= hour <= 20:  # Veƒçern√≠ ≈°piƒçka
            base_price = 4.8 + random.uniform(0, 1.2)
        else:  # Ostatn√≠ ƒçasy
            base_price = 2.5 + random.uniform(0, 0.8)
        
        demo_data.append({
            'hour': hour,
            'spotPrice': round(base_price, 2),
            'timestamp': f"{date.today().isoformat()}T{hour:02d}:00:00Z"
        })
    
    return demo_data

@app.route('/api/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0'
    })

if __name__ == '__main__':
    # Pro lok√°ln√≠ v√Ωvoj
    port = int(os.environ.get('PORT', 3000))
    
    print("=" * 50)
    print("üöÄ PROXY SERVER PRO SPOTOV√â CENY ELEKT≈òINY")
    print("=" * 50)
    print(f"üìç Server bƒõ≈æ√≠ na portu: {port}")
    print("=" * 50)
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )
